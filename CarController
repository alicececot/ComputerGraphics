using UnityEngine;
using System.Collections;
using System.Collections.Generic; 
using UnityEngine.SceneManagement;



public class CarController : MonoBehaviour
{
    internal enum driveType {

        frontWheelDrive,
        rearWheelDrive,
        allWheelDrive
    }
    [SerializeField]private driveType drive;

    internal enum gearBox{
        automatic,
        manual
    }
    [SerializeField]private gearBox gearChange;



    [Header("Variables")] 
    public float handBrakeFrictionMultiplier = 2f;
    public float totalPower;
    public float KPH;
    public float wheelsRPM;
    public float smoothTime = 0.09f;
    public float engineRPM;
    public float maxRPM , minRPM;
    public float[] gears;
    public float[] gearChangeSpeed;
    public ParticleSystem[] nitrusSmoke;

    public int gearNum = 1;
    [HideInInspector]public bool playPauseSmoke = false;
    public float nitrusValue;
    [HideInInspector]public bool nitrusFlag =false;
    public AnimationCurve enginePower;
    public bool reverse = false;

    private GameManager2 manager;
    public inputManager IM;
    private GameObject wheelMeshes,wheelColliders;
    private GameObject wheelMeshesAI, wheelCollidersAI;
    private WheelCollider[] wheels = new WheelCollider[4];
    private GameObject[] wheelMesh = new GameObject[4];
    private GameObject centerOfMass;
    public Rigidbody rigidbody;
    

    private float lastValue;
	  private WheelFrictionCurve  forwardFriction,sidewaysFriction;
    private float brakePower = 50000;
    private float radius = 6;
    private float driftFactor;
    private float DownForceValue = 200f;
    public float motorTorque = 200;
    public float steeringMax = 4; 
    private float horizontal, vertical;
    [HideInInspector]public bool hasFinished;
    public string carName;
    private bool flag=false;
    [HideInInspector]public bool test;

    private void Awake()
    {
        if (gameObject.tag == "Player"){
            getObjects();
        }
        else if (gameObject.tag == "AI"){
            getObjectsAI();
        }

       
    } 

    private void Update() 
    {
        horizontal = IM.horizontal;
        vertical = IM.vertical;
        lastValue = engineRPM;

        addDownForce();
        animateWheels();
        steerVehicle();
       
        calculateEnginePower();
        if(gameObject.tag == "AI")return;
        
        adjustTraction();
        activateNitrus();
    }

    private void moveVehicle(){

        brakeVehicle();

        if (drive == driveType.allWheelDrive){
            for (int i = 0; i < wheels.Length; i++){
                wheels[i].motorTorque = (-totalPower) / 4;
                wheels[i].brakeTorque = brakePower;
            }
        }else if(drive == driveType.rearWheelDrive){
            wheels[2].motorTorque = (-totalPower)  / 2;
            wheels[3].motorTorque = (-totalPower)  / 2;

            for (int i = 0; i < wheels.Length; i++)
            {
                wheels[i].brakeTorque = brakePower;
            }
        }
        else{
            wheels[0].motorTorque = (-totalPower)  / 2;
            wheels[1].motorTorque = (-totalPower)  / 2;

            for (int i = 0; i < wheels.Length; i++)
            {
                wheels[i].brakeTorque = brakePower;
            }
        }

        KPH = rigidbody.linearVelocity.magnitude * 3.6f;


    }

    private void brakeVehicle(){

        if (vertical < 0){
            brakePower =(KPH >= 20)? 2000 : 0;
        }
        else if (vertical == 0 &&(KPH <= 20 || KPH >= -20)){
            brakePower = 500;
        }
        else{
            brakePower = 0;
        }


    }

    

    private void steerVehicle(){

         
        if (horizontal > 0 ) {
				
            wheels[0].steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius + (1.5f / 2))) * horizontal;
            wheels[1].steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius - (1.5f / 2))) * horizontal;
        } else if (horizontal < 0 ) {                                                          
            wheels[0].steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius - (1.5f / 2))) * horizontal;
            wheels[1].steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius + (1.5f / 2))) * horizontal;
			
        } else {
            wheels[0].steerAngle =0;
            wheels[1].steerAngle =0;
        }

    }


    private void animateWheels()
    {
        Vector3 wheelPosition = Vector3.zero;
        Quaternion wheelRotation = Quaternion.identity;


        for (int i=0; i<4; i++){
            wheels[i].GetWorldPose(out wheelPosition, out wheelRotation);
            wheelMesh[i].transform.position = wheelPosition;

            if (i == 1 || i==3){
                wheelMesh[i].transform.rotation = wheelRotation * Quaternion.Euler(0, 0, 90); // Ruota di 90° sull'asse Z
            }
            else {
                 wheelMesh[i].transform.rotation = wheelRotation * Quaternion.Euler(0, 180, 90); // Ruota di 90° sull'asse Z
            }
        }
    }
    private void getObjectsAI()
    {
        if (gameObject.tag == "AI"){
        IM = GetComponent<inputManager>();  

        rigidbody = GetComponent<Rigidbody>();
        wheelCollidersAI = gameObject.transform.Find("wheelCollidersAI").gameObject;
        wheelMeshesAI = gameObject.transform.Find("wheelMeshesAI").gameObject;
        wheels[0] = wheelCollidersAI.transform.Find("0").gameObject.GetComponent<WheelCollider>();
        wheels[1] = wheelCollidersAI.transform.Find("1").gameObject.GetComponent<WheelCollider>();
        wheels[2] = wheelCollidersAI.transform.Find("2").gameObject.GetComponent<WheelCollider>();
        wheels[3] = wheelCollidersAI.transform.Find("3").gameObject.GetComponent<WheelCollider>();

        wheelMesh[0] = wheelMeshesAI.transform.Find("0").gameObject;
        wheelMesh[1] = wheelMeshesAI.transform.Find("1").gameObject;
        wheelMesh[2] = wheelMeshesAI.transform.Find("2").gameObject;
        wheelMesh[3] = wheelMeshesAI.transform.Find("3").gameObject;


        centerOfMass = GameObject.Find("mass");
        rigidbody.centerOfMass = centerOfMass.transform.localPosition;
        }
    }
    private void getObjects(){
        IM = GetComponent<inputManager>(); 
        manager = GameObject.FindGameObjectWithTag("gameManager").GetComponent<GameManager2>();
        rigidbody = GetComponent<Rigidbody>();
        wheelColliders = GameObject.Find("wheelColliders");
        wheelMeshes = GameObject.Find("wheelMeshes");


        wheels[0]=wheelColliders.transform.Find("0").gameObject.GetComponent<WheelCollider>();
        wheels[1]=wheelColliders.transform.Find("1").gameObject.GetComponent<WheelCollider>();
        wheels[2]=wheelColliders.transform.Find("2").gameObject.GetComponent<WheelCollider>();
        wheels[3]=wheelColliders.transform.Find("3").gameObject.GetComponent<WheelCollider>();

        wheelMesh[0] = wheelMeshes.transform.Find("0").gameObject;
        wheelMesh[1] = wheelMeshes.transform.Find("1").gameObject;
        wheelMesh[2] = wheelMeshes.transform.Find("2").gameObject;
        wheelMesh[3] = wheelMeshes.transform.Find("3").gameObject;

        centerOfMass = GameObject.Find("mass");
        rigidbody.centerOfMass = centerOfMass.transform.localPosition;
    }

    private void addDownForce(){
        rigidbody.AddForce(-transform.up * DownForceValue * rigidbody.linearVelocity.magnitude);
    }




    private void adjustTraction(){
           
        float driftSmothFactor = .7f * Time.deltaTime;

		if(IM.handbrake){
            sidewaysFriction = wheels[0].sidewaysFriction;
            forwardFriction = wheels[0].forwardFriction;

            float velocity = 0;
            sidewaysFriction.extremumValue =sidewaysFriction.asymptoteValue = forwardFriction.extremumValue = forwardFriction.asymptoteValue =
                Mathf.SmoothDamp(forwardFriction.asymptoteValue,driftFactor * handBrakeFrictionMultiplier,ref velocity ,driftSmothFactor );

            for (int i = 0; i < 4; i++) {
                wheels [i].sidewaysFriction = sidewaysFriction;
                wheels [i].forwardFriction = forwardFriction;
            }

            sidewaysFriction.extremumValue = sidewaysFriction.asymptoteValue = forwardFriction.extremumValue = forwardFriction.asymptoteValue =  1.1f;
                //extra grip for the front wheels
            for (int i = 0; i < 2; i++) {
                wheels [i].sidewaysFriction = sidewaysFriction;
                wheels [i].forwardFriction = forwardFriction;
            }
            rigidbody.AddForce(transform.forward * (KPH / 400) * 10000 );
		}
            //executed when handbrake is being held
        else{

			forwardFriction = wheels[0].forwardFriction;
			sidewaysFriction = wheels[0].sidewaysFriction;

			forwardFriction.extremumValue = forwardFriction.asymptoteValue = sidewaysFriction.extremumValue = sidewaysFriction.asymptoteValue = 
                ((KPH * handBrakeFrictionMultiplier) / 300) + 1;

			for (int i = 0; i < 4; i++) {
				wheels [i].forwardFriction = forwardFriction;
				wheels [i].sidewaysFriction = sidewaysFriction;

			}
        }

            
		for(int i = 2;i<4 ;i++){

            WheelHit wheelHit;

            wheels[i].GetGroundHit(out wheelHit);
                //smoke
            if(wheelHit.sidewaysSlip >= 0.3f || wheelHit.sidewaysSlip <= -0.3f ||wheelHit.forwardSlip >= .3f || wheelHit.forwardSlip <= -0.3f)
                playPauseSmoke = true;
            else
                playPauseSmoke = false;
                        

			if(wheelHit.sidewaysSlip < 0 )	driftFactor = (1 + -horizontal) * Mathf.Abs(wheelHit.sidewaysSlip) ;

			if(wheelHit.sidewaysSlip > 0 )	driftFactor = (1 + horizontal )* Mathf.Abs(wheelHit.sidewaysSlip );
		}	
		
	}
    private void wheelRPM(){
        float sum = 0;
        int R=0;


        for(int i=0; i<4; i++){
           sum += wheels[i].rpm;
           R++;
        }
        wheelsRPM = (R!=0) ? sum / R : 0;

        if(wheelsRPM > 0 && !reverse ){ 
            reverse = true;
            if (gameObject.tag != "AI") manager.changeGear();
        }
        else if(wheelsRPM < 0 && reverse){ 
            reverse = false; 
            if (gameObject.tag != "AI") manager.changeGear();
        }
    }

    private void calculateEnginePower()
    {
        wheelRPM();

        // Controlla che l'array gears non sia vuoto e che gearNum sia valido
        if (gears != null && gears.Length > 0 && gearNum < gears.Length)
        {
            if (vertical != 0)
            {
                rigidbody.linearDamping = 0.005f;
            }
            else
            {
                rigidbody.linearDamping = 0.1f;
            }

            // Calcolo della potenza del motore
            totalPower = 3.6f * enginePower.Evaluate(engineRPM) * vertical;

            float velocity = 0.0f;
            if (engineRPM >= maxRPM || flag)
            {
                engineRPM = Mathf.SmoothDamp(engineRPM, maxRPM - 500, ref velocity, 0.05f);
                flag = (engineRPM >= maxRPM - 450);
                test = (lastValue > engineRPM);
            }
            else
            {
                // Controlla il limite di gearNum prima di accedere all'array
                engineRPM = Mathf.SmoothDamp(engineRPM, 1000 + (Mathf.Abs(wheelsRPM) * 3.6f * gears[gearNum]), ref velocity, smoothTime);
                test = false;
            }

            if (engineRPM >= maxRPM + 1000) engineRPM = maxRPM + 1000; // Limita l'RPM massimo
        }
        else
        {
            Debug.LogError("Errore: Array gears vuoto o gearNum fuori limite!");
        }

        moveVehicle();
        shifter();
    }



    private bool checkGears(){
        if(KPH >= gearChangeSpeed[gearNum] ) return true;
        else return false;
    }



    private void shifter(){

        if(!isGrounded())return;
            //automatic
        if(engineRPM > maxRPM && gearNum < gears.Length-1 && !reverse && checkGears() ){
            gearNum ++;
            if(gameObject.tag != "AI") manager.changeGear();
            return;
        }
        if(engineRPM < minRPM && gearNum > 0){
            gearNum --;
            if (gameObject.tag != "AI") manager.changeGear();
        }

    }   

    private bool isGrounded(){
        if(wheels[0].isGrounded && wheels[1].isGrounded && wheels[2].isGrounded && wheels[3].isGrounded)
            return true;
        else 
            return false;
    }

    private IEnumerator timedLoop(){
		while(true){
			yield return new WaitForSeconds(.7f);
            radius = 6 + KPH / 20;
            
		}
	}


    public void activateNitrus(){
        if (!IM.boosting && nitrusValue <= 10 ){
            nitrusValue += Time.deltaTime / 3;
        }
        else{
            nitrusValue -= (nitrusValue <= 0 ) ? 0 : (Time.deltaTime*3);
        }

        if (IM.boosting){
            if (nitrusValue > 0) { 
                startNitrusEmitter();
                rigidbody.AddForce(-transform.forward * 2000);
            } 
            else stopNitrusEmitter();
        }
        else stopNitrusEmitter();

    }

        public void startNitrusEmitter()
    {
        if (nitrusFlag) return;
        for (int i = 0; i < nitrusSmoke.Length; i++)
        {
            nitrusSmoke[i].Play();
        }
        nitrusFlag = true;
    }

    
    public void stopNitrusEmitter()
    {
        if (!nitrusFlag) return;
        for (int i = 0; i < nitrusSmoke.Length; i++)
        {
            nitrusSmoke[i].Stop();
        }
        nitrusFlag = false;

    }

}
